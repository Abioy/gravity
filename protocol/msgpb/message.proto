syntax = "proto3";
package msgpb;

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/any.proto";


enum DataSourceType {
    UNKNOWN_DATA_SOURCE = 0;
    MYSQL = 1;
    MONGODB = 2;
    TIDB = 3;
    REDIS = 4;
    CODIS = 5;

}

message Msg {
    // Version is the Msg definition version
    string version = 1;
    // Database is the database/schema name for MySQL
    // is the database for Mongo
    string database = 2;
    // Table is the table name for MySQL
    // is the collection name for Mongo
    string table = 3;
    // MsgType is the message type
    string msgType = 4;

    // Timestamp is the binlog event header timestamp for MySQL
    google.protobuf.Timestamp timestamp = 5;

    DMLMsg dmlMsg = 6;
    DDLMsg ddlMsg = 7;
}

// DDLMsg is not available for Mongo?
message DDLMsg {
    // The DDL SQL
    string SQL = 2;
}


message DMLMsg {
    string Op = 1;
    // Data is the changed data
    map<string, google.protobuf.Any> data = 2;
    // Old is the original data (if it is not empty)
    map<string, google.protobuf.Any> old = 3;
    // Pks is the pkColumnName -> pkColumnValue mapping,
    map<string, google.protobuf.Any> pks = 4;

}

message ConfigureRequest {
    map<string, google.protobuf.Any> data = 1;
}

message ConfigureResponse {
    google.protobuf.StringValue error = 1;
}

message FilterRequest {
    Msg msg = 1;
}

message FilterResponse {
    Msg msg = 1;
    bool continueNext = 2;
    google.protobuf.StringValue error = 3;
}

service FilterPlugin {
    rpc Configure(ConfigureRequest) returns (ConfigureResponse);
    rpc Filter(FilterRequest) returns (FilterResponse);
}