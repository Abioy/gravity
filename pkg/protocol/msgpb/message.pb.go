// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: message.proto

/*
	Package msgpb is a generated protocol buffer package.

	It is generated from these files:
		message.proto

	It has these top-level messages:
		Msg
		DDLMsg
*/
package msgpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/gogo/protobuf/types"
import msgpb1 "."

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MsgType int32

const (
	MsgType_UNKNOWN_MSG MsgType = 0
	// below are DML types
	MsgType_CREATE MsgType = 1
	MsgType_UPDATE MsgType = 2
	MsgType_DELETE MsgType = 3
	// below are DDL types
	MsgType_CREATE_DATABASE MsgType = 4
	MsgType_DROP_DATABASE   MsgType = 5
	MsgType_CREATE_TABLE    MsgType = 6
	MsgType_DROP_TABLE      MsgType = 7
	MsgType_ALTER_TABLE     MsgType = 8
	MsgType_TRUNCATE_TABLE  MsgType = 9
	MsgType_RENAME_TABLE    MsgType = 10
	MsgType_CREATE_INDEX    MsgType = 11
	MsgType_DROP_INDEX      MsgType = 12
	MsgType_GENERAL_DDL     MsgType = 13
)

var MsgType_name = map[int32]string{
	0:  "UNKNOWN_MSG",
	1:  "CREATE",
	2:  "UPDATE",
	3:  "DELETE",
	4:  "CREATE_DATABASE",
	5:  "DROP_DATABASE",
	6:  "CREATE_TABLE",
	7:  "DROP_TABLE",
	8:  "ALTER_TABLE",
	9:  "TRUNCATE_TABLE",
	10: "RENAME_TABLE",
	11: "CREATE_INDEX",
	12: "DROP_INDEX",
	13: "GENERAL_DDL",
}
var MsgType_value = map[string]int32{
	"UNKNOWN_MSG":     0,
	"CREATE":          1,
	"UPDATE":          2,
	"DELETE":          3,
	"CREATE_DATABASE": 4,
	"DROP_DATABASE":   5,
	"CREATE_TABLE":    6,
	"DROP_TABLE":      7,
	"ALTER_TABLE":     8,
	"TRUNCATE_TABLE":  9,
	"RENAME_TABLE":    10,
	"CREATE_INDEX":    11,
	"DROP_INDEX":      12,
	"GENERAL_DDL":     13,
}

func (x MsgType) String() string {
	return proto.EnumName(MsgType_name, int32(x))
}
func (MsgType) EnumDescriptor() ([]byte, []int) { return fileDescriptorMessage, []int{0} }

type DataSourceType int32

const (
	DataSourceType_UNKNOWN_DATA_SOURCE DataSourceType = 0
	DataSourceType_MYSQL               DataSourceType = 1
	DataSourceType_MONGODB             DataSourceType = 2
	DataSourceType_TIDB                DataSourceType = 3
	DataSourceType_REDIS               DataSourceType = 4
	DataSourceType_CODIS               DataSourceType = 5
)

var DataSourceType_name = map[int32]string{
	0: "UNKNOWN_DATA_SOURCE",
	1: "MYSQL",
	2: "MONGODB",
	3: "TIDB",
	4: "REDIS",
	5: "CODIS",
}
var DataSourceType_value = map[string]int32{
	"UNKNOWN_DATA_SOURCE": 0,
	"MYSQL":               1,
	"MONGODB":             2,
	"TIDB":                3,
	"REDIS":               4,
	"CODIS":               5,
}

func (x DataSourceType) String() string {
	return proto.EnumName(DataSourceType_name, int32(x))
}
func (DataSourceType) EnumDescriptor() ([]byte, []int) { return fileDescriptorMessage, []int{1} }

type Msg struct {
	// Version is the Msg definition version
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// Database is the database/schema name for MySQL
	// is the database for Mongo
	Database string `protobuf:"bytes,2,opt,name=database,proto3" json:"database,omitempty"`
	// Table is the table name for MySQL
	// is the collection name for Mongo
	Table string `protobuf:"bytes,3,opt,name=table,proto3" json:"table,omitempty"`
	// MsgType is the message type
	MsgType MsgType `protobuf:"varint,4,opt,name=msgType,proto3,enum=msgpb.MsgType" json:"msgType,omitempty"`
	// Timestamp is the binlog event header timestamp for MySQL
	Timestamp *google_protobuf.Timestamp `protobuf:"bytes,5,opt,name=timestamp" json:"timestamp,omitempty"`
	DmlMsg    *msgpb1.DMLMsg             `protobuf:"bytes,6,opt,name=dmlMsg" json:"dmlMsg,omitempty"`
	DdlMsg    *DDLMsg                    `protobuf:"bytes,7,opt,name=ddlMsg" json:"ddlMsg,omitempty"`
}

func (m *Msg) Reset()                    { *m = Msg{} }
func (m *Msg) String() string            { return proto.CompactTextString(m) }
func (*Msg) ProtoMessage()               {}
func (*Msg) Descriptor() ([]byte, []int) { return fileDescriptorMessage, []int{0} }

func (m *Msg) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Msg) GetDatabase() string {
	if m != nil {
		return m.Database
	}
	return ""
}

func (m *Msg) GetTable() string {
	if m != nil {
		return m.Table
	}
	return ""
}

func (m *Msg) GetMsgType() MsgType {
	if m != nil {
		return m.MsgType
	}
	return MsgType_UNKNOWN_MSG
}

func (m *Msg) GetTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *Msg) GetDmlMsg() *msgpb1.DMLMsg {
	if m != nil {
		return m.DmlMsg
	}
	return nil
}

func (m *Msg) GetDdlMsg() *DDLMsg {
	if m != nil {
		return m.DdlMsg
	}
	return nil
}

// DDLMsg is not available for Mongo?
type DDLMsg struct {
	// The DDL SQL
	SQL string `protobuf:"bytes,2,opt,name=SQL,proto3" json:"SQL,omitempty"`
}

func (m *DDLMsg) Reset()                    { *m = DDLMsg{} }
func (m *DDLMsg) String() string            { return proto.CompactTextString(m) }
func (*DDLMsg) ProtoMessage()               {}
func (*DDLMsg) Descriptor() ([]byte, []int) { return fileDescriptorMessage, []int{1} }

func (m *DDLMsg) GetSQL() string {
	if m != nil {
		return m.SQL
	}
	return ""
}

func init() {
	proto.RegisterType((*Msg)(nil), "msgpb.Msg")
	proto.RegisterType((*DDLMsg)(nil), "msgpb.DDLMsg")
	proto.RegisterEnum("msgpb.MsgType", MsgType_name, MsgType_value)
	proto.RegisterEnum("msgpb.DataSourceType", DataSourceType_name, DataSourceType_value)
}
func (m *Msg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Msg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Version) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Version)))
		i += copy(dAtA[i:], m.Version)
	}
	if len(m.Database) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Database)))
		i += copy(dAtA[i:], m.Database)
	}
	if len(m.Table) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Table)))
		i += copy(dAtA[i:], m.Table)
	}
	if m.MsgType != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.MsgType))
	}
	if m.Timestamp != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.Timestamp.Size()))
		n1, err := m.Timestamp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.DmlMsg != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.DmlMsg.Size()))
		n2, err := m.DmlMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.DdlMsg != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.DdlMsg.Size()))
		n3, err := m.DdlMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *DDLMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DDLMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SQL) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.SQL)))
		i += copy(dAtA[i:], m.SQL)
	}
	return i, nil
}

func encodeFixed64Message(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Message(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintMessage(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Msg) Size() (n int) {
	var l int
	_ = l
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Database)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Table)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.MsgType != 0 {
		n += 1 + sovMessage(uint64(m.MsgType))
	}
	if m.Timestamp != nil {
		l = m.Timestamp.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.DmlMsg != nil {
		l = m.DmlMsg.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.DdlMsg != nil {
		l = m.DdlMsg.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *DDLMsg) Size() (n int) {
	var l int
	_ = l
	l = len(m.SQL)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func sovMessage(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMessage(x uint64) (n int) {
	return sovMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Msg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Msg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Msg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Database", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Database = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Table", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Table = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgType", wireType)
			}
			m.MsgType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgType |= (MsgType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Timestamp == nil {
				m.Timestamp = &google_protobuf.Timestamp{}
			}
			if err := m.Timestamp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DmlMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DmlMsg == nil {
				m.DmlMsg = &msgpb1.DMLMsg{}
			}
			if err := m.DmlMsg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DdlMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DdlMsg == nil {
				m.DdlMsg = &DDLMsg{}
			}
			if err := m.DdlMsg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DDLMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DDLMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DDLMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SQL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SQL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMessage
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMessage(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMessage = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessage   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("message.proto", fileDescriptorMessage) }

var fileDescriptorMessage = []byte{
	// 482 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x91, 0xdf, 0x8a, 0xd3, 0x40,
	0x14, 0xc6, 0x3b, 0x6d, 0x93, 0xb4, 0xa7, 0xdb, 0xee, 0x38, 0x2b, 0x18, 0x72, 0x51, 0xcb, 0x82,
	0x50, 0xf6, 0x22, 0x0b, 0xeb, 0x8d, 0xb7, 0x49, 0x67, 0x28, 0xc5, 0xfc, 0xd9, 0x9d, 0xa4, 0xa8,
	0x57, 0x25, 0xb1, 0x31, 0x2c, 0x34, 0xa6, 0x74, 0xb2, 0x82, 0xd7, 0xbe, 0x84, 0x8f, 0xe4, 0xa5,
	0x8f, 0x20, 0xf5, 0x0d, 0x7c, 0x02, 0x99, 0x49, 0xd2, 0xea, 0xdd, 0x77, 0xbe, 0xef, 0x97, 0x33,
	0xdf, 0x21, 0x30, 0x2e, 0x32, 0x21, 0x92, 0x3c, 0xb3, 0xf7, 0x87, 0xb2, 0x2a, 0x89, 0x56, 0x88,
	0x7c, 0x9f, 0x5a, 0x2f, 0xf3, 0xb2, 0xcc, 0x77, 0xd9, 0xad, 0x32, 0xd3, 0xa7, 0x4f, 0xb7, 0xd5,
	0x63, 0x91, 0x89, 0x2a, 0x29, 0xf6, 0x35, 0x67, 0x0d, 0xb7, 0xc5, 0xae, 0x96, 0xd7, 0xdf, 0xba,
	0xd0, 0xf3, 0x45, 0x4e, 0x4c, 0x30, 0xbe, 0x64, 0x07, 0xf1, 0x58, 0x7e, 0x36, 0xd1, 0x0c, 0xcd,
	0x87, 0xbc, 0x1d, 0x89, 0x05, 0x83, 0x6d, 0x52, 0x25, 0x69, 0x22, 0x32, 0xb3, 0xab, 0xa2, 0xd3,
	0x4c, 0x9e, 0x83, 0x56, 0x25, 0xe9, 0x2e, 0x33, 0x7b, 0x2a, 0xa8, 0x07, 0x32, 0x07, 0xa3, 0x10,
	0x79, 0xfc, 0x75, 0x9f, 0x99, 0xfd, 0x19, 0x9a, 0x4f, 0xee, 0x26, 0xb6, 0x2a, 0x66, 0xfb, 0xb5,
	0xcb, 0xdb, 0x98, 0xbc, 0x81, 0xe1, 0xa9, 0x9b, 0xa9, 0xcd, 0xd0, 0x7c, 0x74, 0x67, 0xd9, 0x75,
	0x7b, 0xbb, 0x6d, 0x6f, 0xc7, 0x2d, 0xc1, 0xcf, 0x30, 0x79, 0x05, 0xfa, 0xb6, 0xd8, 0xf9, 0x22,
	0x37, 0x75, 0xf5, 0xd9, 0xb8, 0x79, 0x82, 0xfa, 0x9e, 0x2f, 0x72, 0xde, 0x84, 0x0a, 0xdb, 0x2a,
	0xcc, 0xf8, 0x1f, 0xa3, 0x0d, 0xa6, 0xc2, 0x6b, 0x0b, 0xf4, 0xda, 0x21, 0x18, 0x7a, 0xd1, 0x83,
	0xd7, 0x1c, 0x2a, 0xe5, 0xcd, 0x1f, 0x04, 0x46, 0x53, 0x9c, 0x5c, 0xc2, 0x68, 0x1d, 0xbc, 0x0d,
	0xc2, 0x77, 0xc1, 0xc6, 0x8f, 0x96, 0xb8, 0x43, 0x00, 0xf4, 0x05, 0x67, 0x4e, 0xcc, 0x30, 0x92,
	0x7a, 0x7d, 0x4f, 0xa5, 0xee, 0x4a, 0x4d, 0x99, 0xc7, 0x62, 0x86, 0x7b, 0xe4, 0x0a, 0x2e, 0x6b,
	0x66, 0x43, 0x9d, 0xd8, 0x71, 0x9d, 0x88, 0xe1, 0x3e, 0x79, 0x06, 0x63, 0xca, 0xc3, 0xfb, 0xb3,
	0xa5, 0x11, 0x0c, 0x17, 0x0d, 0x17, 0x3b, 0xae, 0xc7, 0xb0, 0x4e, 0x26, 0x00, 0x0a, 0xaa, 0x67,
	0x43, 0x3e, 0xef, 0x78, 0x31, 0xe3, 0x8d, 0x31, 0x20, 0x04, 0x26, 0x31, 0x5f, 0x07, 0x8b, 0xf3,
	0x47, 0x43, 0xb9, 0x86, 0xb3, 0xc0, 0xf1, 0x5b, 0x07, 0xfe, 0x59, 0xbc, 0x0a, 0x28, 0x7b, 0x8f,
	0x47, 0xa7, 0xc5, 0xf5, 0x7c, 0x21, 0x17, 0x2f, 0x59, 0xc0, 0xb8, 0xe3, 0x6d, 0x28, 0xf5, 0xf0,
	0xf8, 0x26, 0x81, 0x09, 0x4d, 0xaa, 0x24, 0x2a, 0x9f, 0x0e, 0x1f, 0x33, 0x75, 0xfa, 0x0b, 0xb8,
	0x6a, 0x4f, 0x97, 0x9d, 0x37, 0x51, 0xb8, 0xe6, 0x0b, 0x86, 0x3b, 0x64, 0x08, 0x9a, 0xff, 0x21,
	0x7a, 0xf0, 0x30, 0x22, 0x23, 0x30, 0xfc, 0x30, 0x58, 0x86, 0xd4, 0xc5, 0x5d, 0x32, 0x80, 0x7e,
	0xbc, 0xa2, 0x2e, 0xee, 0x49, 0x82, 0x33, 0xba, 0x8a, 0x70, 0x5f, 0xca, 0x45, 0x28, 0xa5, 0xe6,
	0xe2, 0x1f, 0xc7, 0x29, 0xfa, 0x79, 0x9c, 0xa2, 0x5f, 0xc7, 0x29, 0xfa, 0xfe, 0x7b, 0xda, 0x49,
	0x75, 0xf5, 0xcb, 0x5f, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xe1, 0x4b, 0x1f, 0x9b, 0xd6, 0x02,
	0x00, 0x00,
}
